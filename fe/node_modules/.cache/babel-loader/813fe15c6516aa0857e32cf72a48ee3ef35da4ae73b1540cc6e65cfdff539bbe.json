{"ast":null,"code":"const BASE_URL = 'http://localhost:5001/api/admin';\nconst getHeaders = () => {\n  const token = localStorage.getItem('token');\n  return {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${token}`\n  };\n};\nexport const adminService = {\n  // User management\n  async getAllUsers() {\n    const response = await fetch(`${BASE_URL}/users`, {\n      headers: getHeaders()\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch users');\n    }\n    return response.json();\n  },\n  async removeUser(userId) {\n    const response = await fetch(`${BASE_URL}/users/${userId}`, {\n      method: 'DELETE',\n      headers: getHeaders()\n    });\n    if (!response.ok) {\n      throw new Error('Failed to remove user');\n    }\n    return response.json();\n  },\n  // Lister management\n  async getAllListers() {\n    const response = await fetch(`${BASE_URL}/listers`, {\n      headers: getHeaders()\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch listers');\n    }\n    return response.json();\n  },\n  async removeLister(listerId) {\n    const response = await fetch(`${BASE_URL}/listers/${listerId}`, {\n      method: 'DELETE',\n      headers: getHeaders()\n    });\n    if (!response.ok) {\n      throw new Error('Failed to remove lister');\n    }\n    return response.json();\n  },\n  // Listing management\n  async getAllListings() {\n    const response = await fetch(`${BASE_URL}/listings`, {\n      headers: getHeaders()\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch listings');\n    }\n    return response.json();\n  },\n  async removeListing(listingId) {\n    const response = await fetch(`${BASE_URL}/listings/${listingId}`, {\n      method: 'DELETE',\n      headers: getHeaders()\n    });\n    if (!response.ok) {\n      throw new Error('Failed to remove listing');\n    }\n    return response.json();\n  }\n};","map":{"version":3,"names":["BASE_URL","getHeaders","token","localStorage","getItem","adminService","getAllUsers","response","fetch","headers","ok","Error","json","removeUser","userId","method","getAllListers","removeLister","listerId","getAllListings","removeListing","listingId"],"sources":["/Users/bhuvan/Desktop/Course-Project-Web-dev-main/fe/src/services/adminService.js"],"sourcesContent":["const BASE_URL = 'http://localhost:5001/api/admin';\n\nconst getHeaders = () => {\n  const token = localStorage.getItem('token');\n  return {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${token}`\n  };\n};\n\nexport const adminService = {\n  // User management\n  async getAllUsers() {\n    const response = await fetch(`${BASE_URL}/users`, {\n      headers: getHeaders()\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch users');\n    }\n    return response.json();\n  },\n\n  async removeUser(userId) {\n    const response = await fetch(`${BASE_URL}/users/${userId}`, {\n      method: 'DELETE',\n      headers: getHeaders()\n    });\n    if (!response.ok) {\n      throw new Error('Failed to remove user');\n    }\n    return response.json();\n  },\n\n  // Lister management\n  async getAllListers() {\n    const response = await fetch(`${BASE_URL}/listers`, {\n      headers: getHeaders()\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch listers');\n    }\n    return response.json();\n  },\n\n  async removeLister(listerId) {\n    const response = await fetch(`${BASE_URL}/listers/${listerId}`, {\n      method: 'DELETE',\n      headers: getHeaders()\n    });\n    if (!response.ok) {\n      throw new Error('Failed to remove lister');\n    }\n    return response.json();\n  },\n\n  // Listing management\n  async getAllListings() {\n    const response = await fetch(`${BASE_URL}/listings`, {\n      headers: getHeaders()\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch listings');\n    }\n    return response.json();\n  },\n\n  async removeListing(listingId) {\n    const response = await fetch(`${BASE_URL}/listings/${listingId}`, {\n      method: 'DELETE',\n      headers: getHeaders()\n    });\n    if (!response.ok) {\n      throw new Error('Failed to remove listing');\n    }\n    return response.json();\n  }\n};"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,iCAAiC;AAElD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EACvB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAO;IACL,cAAc,EAAE,kBAAkB;IAClC,eAAe,EAAE,UAAUF,KAAK;EAClC,CAAC;AACH,CAAC;AAED,OAAO,MAAMG,YAAY,GAAG;EAC1B;EACA,MAAMC,WAAWA,CAAA,EAAG;IAClB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,QAAQ,QAAQ,EAAE;MAChDS,OAAO,EAAER,UAAU,CAAC;IACtB,CAAC,CAAC;IACF,IAAI,CAACM,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1C;IACA,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EACxB,CAAC;EAED,MAAMC,UAAUA,CAACC,MAAM,EAAE;IACvB,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,QAAQ,UAAUc,MAAM,EAAE,EAAE;MAC1DC,MAAM,EAAE,QAAQ;MAChBN,OAAO,EAAER,UAAU,CAAC;IACtB,CAAC,CAAC;IACF,IAAI,CAACM,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1C;IACA,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EACxB,CAAC;EAED;EACA,MAAMI,aAAaA,CAAA,EAAG;IACpB,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,QAAQ,UAAU,EAAE;MAClDS,OAAO,EAAER,UAAU,CAAC;IACtB,CAAC,CAAC;IACF,IAAI,CAACM,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC5C;IACA,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EACxB,CAAC;EAED,MAAMK,YAAYA,CAACC,QAAQ,EAAE;IAC3B,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,QAAQ,YAAYkB,QAAQ,EAAE,EAAE;MAC9DH,MAAM,EAAE,QAAQ;MAChBN,OAAO,EAAER,UAAU,CAAC;IACtB,CAAC,CAAC;IACF,IAAI,CAACM,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC5C;IACA,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EACxB,CAAC;EAED;EACA,MAAMO,cAAcA,CAAA,EAAG;IACrB,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,QAAQ,WAAW,EAAE;MACnDS,OAAO,EAAER,UAAU,CAAC;IACtB,CAAC,CAAC;IACF,IAAI,CAACM,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;IAC7C;IACA,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EACxB,CAAC;EAED,MAAMQ,aAAaA,CAACC,SAAS,EAAE;IAC7B,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,QAAQ,aAAaqB,SAAS,EAAE,EAAE;MAChEN,MAAM,EAAE,QAAQ;MAChBN,OAAO,EAAER,UAAU,CAAC;IACtB,CAAC,CAAC;IACF,IAAI,CAACM,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;IAC7C;IACA,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EACxB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}